server:
  port: 8083
  servlet:
    context-path: /
  error:
    include-message: always
    include-binding-errors: always

spring:
  application:
    name: reliability-workshop
  
  # Jackson configuration
  jackson:
    default-property-inclusion: non_null
    serialization:
      write-dates-as-timestamps: false

  # Thread pool configuration
  task:
    execution:
      pool:
        core-size: 8
        max-size: 16
        queue-capacity: 100
        keep-alive: 60s
      thread-name-prefix: async-

# Resilience4j Circuit Breaker Configuration
resilience4j:
  circuitbreaker:
    instances:
      payment-service:
        sliding-window-size: 10
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10s
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        record-exceptions:
          - ddia.example.ddia.exception.PaymentException
          - java.util.concurrent.TimeoutException
          - java.io.IOException
      
      inventory-service:
        sliding-window-size: 5
        failure-rate-threshold: 60
        wait-duration-in-open-state: 5s
        minimum-number-of-calls: 3
        permitted-number-of-calls-in-half-open-state: 2
        automatic-transition-from-open-to-half-open-enabled: true

  # Retry Configuration
  retry:
    instances:
      payment-service:
        max-attempts: 3
        wait-duration: 2s
        exponential-backoff-multiplier: 2
        exponential-max-wait-duration: 10s
        retry-exceptions:
          - ddia.example.ddia.exception.PaymentException
          - java.util.concurrent.TimeoutException
        ignore-exceptions:
          - java.lang.IllegalArgumentException

  # Bulkhead Configuration
  bulkhead:
    instances:
      payment-service:
        max-concurrent-calls: 10
        max-wait-duration: 100ms

      inventory-service:
        max-concurrent-calls: 5
        max-wait-duration: 50ms

  # Rate Limiter Configuration
  ratelimiter:
    instances:
      payment-service:
        limit-for-period: 10
        limit-refresh-period: 1s
        timeout-duration: 0s
        register-health-indicator: true

# Spring Boot Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,circuitbreakers,retries,bulkheads,ratelimiters
      base-path: /actuator

  endpoint:
    health:
      show-details: always
      show-components: always

    metrics:
      enabled: true

    prometheus:
      enabled: true

  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.75, 0.95, 0.99
    tags:
      application: ${spring.application.name}

# Logging Configuration
logging:
  level:
    root: INFO
    ddia.example.ddia: DEBUG
    io.github.resilience4j: DEBUG
    org.springframework.web: DEBUG
  
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%logger{36}] - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%logger{36}] - %msg%n"
  
  file:
    name: logs/reliability-workshop.log

# Custom Application Properties
app:
  chaos:
    enabled: true
    interval: 30s
    experiments:
      latency:
        enabled: true
        min-delay: 1000
        max-delay: 5000
      
      exception:
        enabled: true
        failure-rate: 0.1
      
      resource:
        enabled: true
        memory-allocation: 100MB